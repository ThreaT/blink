package cool.blink.back.database;

public abstract class Column {

    private final String name;
    private final ColumnGenerationType columnGenerationType;
    private final Integer length;
    private final Character lengthSuffix;
    private final Boolean primaryKey;
    private final Boolean notNull;
    private Table table;

    public Column(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
        this.name = name;
        this.columnGenerationType = columnGenerationType;
        this.length = length;
        this.lengthSuffix = lengthSuffix;
        this.primaryKey = primaryKey;
        this.notNull = notNull;
        this.table = table;
    }

    public final String getName() {
        return name;
    }

    public ColumnGenerationType getColumnGenerationType() {
        return columnGenerationType;
    }

    public final Integer getLength() {
        return length;
    }

    public Character getLengthSuffix() {
        return lengthSuffix;
    }

    public final Boolean getPrimaryKey() {
        return primaryKey;
    }

    public final Boolean getNotNull() {
        return notNull;
    }

    public final Table getTable() {
        return table;
    }

    public final void setTable(final Table table) {
        this.table = table;
    }

    public static enum ColumnGenerationType {

        ALWAYS("GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1)"),
        BY_DEFAULT("GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)");

        private final String generationType;

        private ColumnGenerationType(final String generationType) {
            this.generationType = generationType;
        }

        @Override
        public final String toString() {
            return generationType;
        }

    }

    //TODO some of the below columns are not yet supported, that's why the constructors just take all the Column constructor arguments even though they may not be necessary
    public static class BIGINT extends Column {

        public BIGINT(final String name, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, null, null, null, primaryKey, notNull, table);
        }

        public BIGINT(final String name, final ColumnGenerationType columnGenerationType, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, null, null, primaryKey, notNull, table);
        }

        public BIGINT(final String name, final Boolean notNull, final Table table) {
            super(name, null, null, null, Boolean.FALSE, notNull, table);
        }

    }

    public static class BLOB extends Column {

        public BLOB(final String name, final Integer length, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, null, length, null, primaryKey, notNull, table);
        }

        public BLOB(final String name, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, null, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class BOOLEAN extends Column {

        public BOOLEAN(final String name, final Boolean notNull, final Table table) {
            super(name, null, null, null, Boolean.FALSE, notNull, table);
        }
    }

    public static class CHAR extends Column {

        public CHAR(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class CHAR_FOR_BIT_DATA extends Column {

        public CHAR_FOR_BIT_DATA(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class CLOB extends Column {

        public CLOB(final String name, final Integer length, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, null, length, null, primaryKey, notNull, table);
        }

        public CLOB(final String name, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, null, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class DATE extends Column {

        public DATE(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class DECIMAL extends Column {

        public DECIMAL(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class DOUBLE extends Column {

        public DOUBLE(final String name, final Table table) {
            super(name, null, null, null, Boolean.FALSE, Boolean.FALSE, table);
        }

        public DOUBLE(final String name, final Boolean notNull, final Table table) {
            super(name, null, null, null, Boolean.FALSE, notNull, table);
        }
    }

    public static class DOUBLE_PRECISION extends Column {

        public DOUBLE_PRECISION(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class FLOAT extends Column {

        public FLOAT(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class INTEGER extends Column {

        public INTEGER(final String name, final Boolean notNull, final Table table) {
            super(name, null, null, null, Boolean.FALSE, notNull, table);
        }

        public INTEGER(final String name, final ColumnGenerationType columnGenerationType, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, null, null, primaryKey, notNull, table);
        }
    }

    public static class LONG_VARCHAR extends Column {

        public LONG_VARCHAR(final String name, final Boolean notNull, final Table table) {
            super(name, null, null, null, Boolean.FALSE, notNull, table);

        }
    }

    public static class LONG_VARCHAR_FOR_BIT_DATA extends Column {

        public LONG_VARCHAR_FOR_BIT_DATA(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class NUMERIC extends Column {

        public NUMERIC(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class REAL extends Column {

        public REAL(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class SMALLINT extends Column {

        public SMALLINT(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class TIME extends Column {

        public TIME(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

    public static class TIMESTAMP extends Column {

        public TIMESTAMP(final String name, final Boolean notNull, final Table table) {
            super(name, null, null, null, Boolean.FALSE, notNull, table);
        }
    }

    public static class VARCHAR extends Column {

        public VARCHAR(final String name, final Integer length, final Boolean notNull, final Table table) {
            super(name, null, length, null, Boolean.FALSE, notNull, table);
        }

        public VARCHAR(final String name, final Integer length, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, null, length, null, primaryKey, notNull, table);
        }
    }

    public static class VARCHAR_FOR_BIT_DATA extends Column {

        public VARCHAR_FOR_BIT_DATA(final String name, final ColumnGenerationType columnGenerationType, final Integer length, final Character lengthSuffix, final Boolean primaryKey, final Boolean notNull, final Table table) {
            super(name, columnGenerationType, length, lengthSuffix, primaryKey, notNull, table);
        }
    }

}
